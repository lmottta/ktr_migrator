#!/bin/bash

# Entrypoint script para KTR Platform
# Desenvolvido por: Engenheiro de Dados Senior
# Data: 2025-06-19

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] KTR-PLATFORM:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO:${NC} $1"
}

# Banner de inicializa√ß√£o
cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     KTR PLATFORM v1.0                      ‚ïë
‚ïë              Sistema de Migra√ß√£o de Pipelines ETL           ‚ïë
‚ïë                                                              ‚ïë
‚ïë              üöÄ Iniciando Container Docker...                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF

# Verificar se est√° rodando como usu√°rio correto
if [ "$(id -u)" = "0" ]; then
    warning "Rodando como root - isso pode ser um risco de seguran√ßa"
fi

# Fun√ß√£o para verificar sa√∫de da aplica√ß√£o
health_check() {
    log "üîç Verificando depend√™ncias..."
    
    # Verificar Python
    if ! command -v python &> /dev/null; then
        error "Python n√£o encontrado"
        exit 1
    fi
    
    # Verificar Streamlit
    if ! python -c "import streamlit" &> /dev/null; then
        error "Streamlit n√£o instalado"
        exit 1
    fi
    
    # Verificar estrutura de diret√≥rios
    for dir in data logs flows config; do
        if [ ! -d "/app/$dir" ]; then
            warning "Criando diret√≥rio ausente: $dir"
            mkdir -p "/app/$dir"
        fi
    done
    
    log "‚úÖ Verifica√ß√µes de sa√∫de conclu√≠das"
}

# Fun√ß√£o para inicializar dados
initialize_data() {
    log "üìä Inicializando estrutura de dados..."
    
    # Criar arquivos de dados b√°sicos se n√£o existirem
    if [ ! -f "/app/data/flows.json" ]; then
        echo '[]' > /app/data/flows.json
        info "Arquivo flows.json criado"
    fi
    
    if [ ! -f "/app/data/schedules.json" ]; then
        echo '[]' > /app/data/schedules.json
        info "Arquivo schedules.json criado"
    fi
    
    # Verificar permiss√µes
    if [ ! -w "/app/data" ]; then
        warning "Sem permiss√£o de escrita em /app/data"
    fi
    
    log "‚úÖ Inicializa√ß√£o de dados conclu√≠da"
}

# Fun√ß√£o para configurar logging
setup_logging() {
    log "üìù Configurando sistema de logs..."
    
    # Criar diret√≥rio de logs com rota√ß√£o
    mkdir -p /app/logs/platform /app/logs/flows /app/logs/executor
    
    # Configurar n√≠vel de log baseado na vari√°vel de ambiente
    export LOG_LEVEL="${LOG_LEVEL:-INFO}"
    
    log "‚úÖ Sistema de logs configurado (N√≠vel: $LOG_LEVEL)"
}

# Fun√ß√£o para aguardar depend√™ncias
wait_for_dependencies() {
    # Se houver vari√°veis de ambiente para servi√ßos externos, aguardar
    if [ -n "$DATABASE_HOST" ]; then
        log "‚è≥ Aguardando banco de dados ($DATABASE_HOST)..."
        
        # Usar Python para verificar conectividade (sempre dispon√≠vel na imagem)
        python -c "
        
import socket
import time
import sys

def check_connection(host, port, timeout=3):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except:
        return False

host = '$DATABASE_HOST'
port = ${DATABASE_PORT:-5432}
max_attempts = 60
attempt = 0

while attempt < max_attempts:
    if check_connection(host, port):
        print(f'‚úÖ Conectado com sucesso ao banco {host}:{port}')
        sys.exit(0)
    time.sleep(2)
    attempt += 1

print(f'‚ùå Timeout ap√≥s {max_attempts * 2} segundos aguardando {host}:{port}')
sys.exit(1)
"
        
        if [ $? -ne 0 ]; then
            error "Falha ao conectar com o banco de dados"
            exit 1
        fi
        
        log "‚úÖ Banco de dados dispon√≠vel"
    fi
}

# Fun√ß√£o de limpeza para shutdown graceful
cleanup() {
    log "üõë Recebido sinal de parada - realizando shutdown graceful..."
    
    # Salvar estado atual se necess√°rio
    if [ -f "/app/.pid" ]; then
        PID=$(cat /app/.pid)
        if kill -0 "$PID" 2>/dev/null; then
            log "Parando processo principal (PID: $PID)..."
            kill -TERM "$PID"
            
            # Aguardar at√© 30 segundos para shutdown graceful
            for i in {1..30}; do
                if ! kill -0 "$PID" 2>/dev/null; then
                    break
                fi
                sleep 1
            done
            
            # For√ßar parada se necess√°rio
            if kill -0 "$PID" 2>/dev/null; then
                warning "For√ßando parada do processo..."
                kill -KILL "$PID"
            fi
        fi
        rm -f /app/.pid
    fi
    
    log "‚úÖ Shutdown graceful conclu√≠do"
    exit 0
}

# Configurar handlers de sinal
trap cleanup SIGTERM SIGINT SIGQUIT

# Executar verifica√ß√µes e inicializa√ß√µes
health_check
initialize_data
setup_logging
wait_for_dependencies

# Vari√°veis de ambiente espec√≠ficas para produ√ß√£o
export STREAMLIT_SERVER_PORT=${STREAMLIT_SERVER_PORT:-8501}
export STREAMLIT_SERVER_ADDRESS=${STREAMLIT_SERVER_ADDRESS:-0.0.0.0}
export STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
export STREAMLIT_SERVER_HEADLESS=true

# Mostrar configura√ß√£o
info "Configura√ß√£o da aplica√ß√£o:"
info "  - Porta: $STREAMLIT_SERVER_PORT"
info "  - Endere√ßo: $STREAMLIT_SERVER_ADDRESS"
info "  - Diret√≥rio de trabalho: $(pwd)"
info "  - Usu√°rio: $(whoami)"
info "  - Python: $(python --version)"

# Executar comando principal
log "üöÄ Iniciando KTR Platform..."

if [ "$#" -eq 0 ] || [ "$1" = "streamlit" ]; then
    # Modo padr√£o - executar Streamlit
    log "Modo: Aplica√ß√£o Streamlit"
    exec streamlit run app.py \
        --server.port="$STREAMLIT_SERVER_PORT" \
        --server.address="$STREAMLIT_SERVER_ADDRESS" \
        --server.headless=true \
        --browser.gatherUsageStats=false &
    
    # Salvar PID para shutdown graceful
    echo $! > /app/.pid
    
    # Aguardar processo principal
    wait $!
    
else
    # Modo customizado - executar comando fornecido
    log "Modo: Comando customizado ($*)"
    exec "$@"
fi 